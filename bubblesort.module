<?php

/**
 * @file
 * Bubblesort simulator module.
 *
 * Developed by Mike Lewis <seismicmike@gmail.com>
 * On Tuesday, September 13, 2016
 * For Third & Grove.
 */

/**
 * Implements hook_menu().
 */
function bubblesort_menu() {
  $items = array();
  $items['bubblesort'] = [
    'title' => 'BubbleSort Simulator',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['bubblesort_simulator'],
    'access callback' => TRUE,
    'file' => 'bubblesort.simulator.inc',
  ];

  $items['admin/config/system/bubblesort'] = [
    'title' => 'Bubblesort Simulator',
    'description' => 'Configure the Bubblesort Simulator',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['bubblesort_simulator_config'],
    'access arguments' => ['administer site configuration'],
    'file' => 'bubblesort.admin.inc',
  ];

  return $items;
}

/**
 * Validation callback for the array size setting field.
 */
function bubblesort_validate_array_size($element, &$form_state) {
  if (!empty($element['#value'])) {
    if (!is_numeric($element['#value'])) {
      form_error($element, t('@title: Please enter a number', ['@title' => $element['#title']]));
    }

    if ($element['#value'] <= 0) {
      form_error($element, t('@title: Please enter positive number.', ['@title' => $element['#title']]));
    }

    if (!ctype_digit($element['#value'])) {
      form_error($element, t('@title: Please enter an integer.', ['@title' => $element['#title']]));
    }

    if (($element['#value'] < 2 || $element['#value'] > 20)) {
      form_error($element, t('@title: Please enter an array size between 2 and 20', ['@title' => $element['#title']]));
    }
  }
}

/**
 * Validation callback for the array size setting field.
 */
function bubblesort_validate_range($element, &$form_state) {
  if (empty($element['#value'])) {
    return TRUE;
  }

  if (!is_numeric($element['#value'])) {
    form_error($element, t('@title: Please enter a number', ['@title' => $element['#title']]));
  }

  if ($element['#value'] <= 0) {
    form_error($element, t('@title: Please enter positive number.', ['@title' => $element['#title']]));
  }

  if (!ctype_digit($element['#value'])) {
    form_error($element, t('@title: Please enter an integer.', ['@title' => $element['#title']]));
  }
}

/**
 * Get the size of the array.
 *
 * @return int
 *   A number from 2 to 20 representing the number of array elements should be
 *   used for sorting.
 */
function bubblesort_get_array_size() {
  return variable_get('bubblesort_array_size', 10);
}

/**
 * Get the size of the array.
 *
 * @return int
 *   A number from 2 to 20 representing the number of array elements should be
 *   used for sorting.
 */
function bubblesort_get_range_min() {
  return variable_get('bubblesort_range_min', 1);
}

/**
 * Get the size of the array.
 *
 * @return int
 *   A number from 2 to 20 representing the number of array elements should be
 *   used for sorting.
 */
function bubblesort_get_range_max() {
  return variable_get('bubblesort_range_max', 100);
}

/**
 * Get the sort direction.
 *
 * @return string
 *   A string representing the direction to sort. Will be one of
 *   - descending: for sorting lorgest to the top.
 *   - ascending: for sorting smallest to the top.
 */
function bubblesort_get_sort_direction() {
  return variable_get('bubblesort_sort_direction', 10);
}

/**
 * Determines if an array is sorted.
 *
 * @param array $array
 *   The array to validate for sorting.
 *
 * @return bool
 *   TRUE indicates that the array has been sorted.
 */
function bubblesort_is_array_sorted(array $array) {
  $sorted = $array;

  switch (bubblesort_get_sort_direction()) {
    case 'ascending':
      sort($sorted);
      break;

    case 'descending':
    default:
      rsort($sorted);
      break;
  }

  foreach ($array as $key => $value) {
    if ($value != $sorted[$key]) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Initialize (Shuffle) the bubblesort array.
 *
 * @return array
 *   A new array to sort.
 */
function bubblesort_generate_array() {
  $array = array();
  $num = bubblesort_get_array_size();

  for ($i = 0; $i < $num; $i++) {
    $array[] = rand(bubblesort_get_range_min(), bubblesort_get_range_max());
  }

  return $array;
}

/**
 * Implements hook_theme().
 */
function bubblesort_theme($existing, $type, $theme, $path) {
  return array(
    'bubblesort_table' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Theme function for the bubblesort table.
 */
function theme_bubblesort_table($params) {
  $array = $params['array'];

  $output = "";

  if (is_array($array)) {
    drupal_add_css(drupal_get_path('module', 'bubblesort') . '/bubblesort.css');

    $output .= '<div id="vector-table-wrapper">';
    $output = '<div id="vector-table">';

    foreach ($array as $key => $value) {
      $classes = ['vector-value'];

      // Swap Position is the position that the sorter found the
      // record that needed to be swapped. To highlight that record
      // in the current array, we need to get the position after it.
      $comparison_key = isset($params['comparison_key']) ? $params['comparison_key'] : NULL;

      if (!is_null($comparison_key)) {
        if ($comparison_key === $key) {
          $classes[] = 'vector-swapped-down';
        }

        if ($comparison_key + 1 === $key) {
          $classes[] = 'vector-swapped-up';
        }
      }

      $length_factor = 500 / bubblesort_get_range_max();

      $output .= sprintf(
            '<div class="%s" style="width: %dpx;"></div>',
            implode(' ', $classes),
            $value * $length_factor
        );
    }

    $output .= '</div>';
    $output .= "</div>";
  }

  return $output;
}
